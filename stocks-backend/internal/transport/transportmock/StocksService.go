// Code generated by mockery v2.53.3. DO NOT EDIT.

package transportmock

import (
	domain "github.com/diegobermudez03/stocks-platform/stocks-backend/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StocksService is an autogenerated mock type for the StocksService type
type StocksService struct {
	mock.Mock
}

// GetActions provides a mock function with no fields
func (_m *StocksService) GetActions() ([]domain.ActionDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 []domain.ActionDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.ActionDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ActionDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ActionDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatings provides a mock function with no fields
func (_m *StocksService) GetRatings() ([]domain.RatingDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRatings")
	}

	var r0 []domain.RatingDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.RatingDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.RatingDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RatingDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendations provides a mock function with no fields
func (_m *StocksService) GetRecommendations() ([]domain.RecommendationDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRecommendations")
	}

	var r0 []domain.RecommendationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.RecommendationDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.RecommendationDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RecommendationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockFullData provides a mock function with given fields: stockId
func (_m *StocksService) GetStockFullData(stockId uuid.UUID) (*domain.StockDataDTO, error) {
	ret := _m.Called(stockId)

	if len(ret) == 0 {
		panic("no return value specified for GetStockFullData")
	}

	var r0 *domain.StockDataDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.StockDataDTO, error)); ok {
		return rf(stockId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.StockDataDTO); ok {
		r0 = rf(stockId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StockDataDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(stockId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStocks provides a mock function with given fields: filter
func (_m *StocksService) GetStocks(filter domain.GetStocksFilter) (*domain.StocksReturnDTO, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetStocks")
	}

	var r0 *domain.StocksReturnDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.GetStocksFilter) (*domain.StocksReturnDTO, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.GetStocksFilter) *domain.StocksReturnDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StocksReturnDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.GetStocksFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PopulateDatabase provides a mock function with no fields
func (_m *StocksService) PopulateDatabase() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopulateDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SuscribeStockPrice provides a mock function with given fields: stockId
func (_m *StocksService) SuscribeStockPrice(stockId uuid.UUID) (chan domain.PriceUpdateDTO, error) {
	ret := _m.Called(stockId)

	if len(ret) == 0 {
		panic("no return value specified for SuscribeStockPrice")
	}

	var r0 chan domain.PriceUpdateDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (chan domain.PriceUpdateDTO, error)); ok {
		return rf(stockId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) chan domain.PriceUpdateDTO); ok {
		r0 = rf(stockId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan domain.PriceUpdateDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(stockId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsuscribeFromStock provides a mock function with given fields: stockId, channel
func (_m *StocksService) UnsuscribeFromStock(stockId uuid.UUID, channel chan domain.PriceUpdateDTO) {
	_m.Called(stockId, channel)
}

// NewStocksService creates a new instance of StocksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStocksService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StocksService {
	mock := &StocksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package stocksmock

import (
	domain "github.com/diegobermudez03/stocks-platform/stocks-backend/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StocksRepo is an autogenerated mock type for the StocksRepo type
type StocksRepo struct {
	mock.Mock
}

// CreateStockRecord provides a mock function with given fields: stock
func (_m *StocksRepo) CreateStockRecord(stock domain.StockModel) error {
	ret := _m.Called(stock)

	if len(ret) == 0 {
		panic("no return value specified for CreateStockRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.StockModel) error); ok {
		r0 = rf(stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActions provides a mock function with no fields
func (_m *StocksRepo) GetActions() ([]domain.ParamValueModel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 []domain.ParamValueModel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.ParamValueModel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ParamValueModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ParamValueModel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasicTopStocks provides a mock function with no fields
func (_m *StocksRepo) GetBasicTopStocks() ([]domain.StockModel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBasicTopStocks")
	}

	var r0 []domain.StockModel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.StockModel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.StockModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StockModel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountWithFilter provides a mock function with given fields: filter
func (_m *StocksRepo) GetCountWithFilter(filter domain.GetStocksFilterModel) (int64, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetCountWithFilter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.GetStocksFilterModel) (int64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.GetStocksFilterModel) int64); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(domain.GetStocksFilterModel) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatings provides a mock function with no fields
func (_m *StocksRepo) GetRatings() ([]domain.ParamValueModel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRatings")
	}

	var r0 []domain.ParamValueModel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.ParamValueModel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ParamValueModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ParamValueModel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordsCount provides a mock function with no fields
func (_m *StocksRepo) GetRecordsCount() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRecordsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockById provides a mock function with given fields: id
func (_m *StocksRepo) GetStockById(id uuid.UUID) (*domain.StockModel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStockById")
	}

	var r0 *domain.StockModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.StockModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.StockModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StockModel)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStocks provides a mock function with given fields: filter
func (_m *StocksRepo) GetStocks(filter domain.GetStocksFilterModel) ([]domain.StockModel, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetStocks")
	}

	var r0 []domain.StockModel
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.GetStocksFilterModel) ([]domain.StockModel, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.GetStocksFilterModel) []domain.StockModel); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StockModel)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.GetStocksFilterModel) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStocksRepo creates a new instance of StocksRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStocksRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *StocksRepo {
	mock := &StocksRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
